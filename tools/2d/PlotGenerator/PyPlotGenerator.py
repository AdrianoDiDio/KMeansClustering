import matplotlib.pyplot as pyplot
import matplotlib.cm as cm
import numpy as np
import csv
import argparse

parser = argparse.ArgumentParser(description='''Show the results of the KMean Clustering algorithm 
                                 generated by KMeansAlgorithm. It will load up to NumPhases cvs files.''')
parser.add_argument("numphases",type=int,help="sets the number of phases.")

args = parser.parse_args()

pyplot.gcf().canvas.set_window_title("KMeansAlgorithm")

for phase in range(args.numphases):
    try:
        with open("In/out_centroids_" + str(phase) + ".csv",newline='') as csvFile:
            centroidsReader = csv.reader(csvFile, delimiter=',')
            next(centroidsReader, None)
            centroidsRow = [[float(row[0]), float(row[1])] for row in centroidsReader if row]
            centroidList = list(centroidsRow)
    except IOError:
        continue

    datasetPointList = []
    try:
        with open("In/out_dataset_" + str(phase) + ".csv",newline='') as csvFile:
            datasetReader = csv.reader(csvFile, delimiter=',')
            next(datasetReader, None)
            datasetRows = [[float(row[0]), float(row[1]), int(row[2])] for row in datasetReader if row]
            datasetPointList = list(datasetRows)
    except IOError:
        continue
    
    markerCentroidSize = 25
    markerCentroidSizeOffset = 2
    centroidX,centroidY = zip(*centroidList)
    centroidColors = np.array(np.random.choice(range(256), size=len(centroidList)))
    centroidColors = cm.rainbow(np.linspace(0, 1, len(centroidList)))
    
    subPlot = pyplot.subplot(1,args.numphases,phase + 1)
    subPlot.title.set_text('Step ' + str(phase))
    subPlot.set_xlabel("x")
    subPlot.set_ylabel("y")
    
    #print(centroidColors)
    subPlot.scatter(centroidX, centroidY,c=centroidColors,alpha=0.6, s= markerCentroidSize ** markerCentroidSizeOffset,
                   marker='D',zorder=1)

    markerDatasetSize = 2
    markerDatasetOffset = 2
    datasetX,datasetY,centroidIndex = zip(*datasetPointList)
    datasetColors = [centroidColors[x] for x in centroidIndex]
    subPlot.scatter(datasetX, datasetY,c=datasetColors,alpha=0.6,s= markerDatasetSize ** markerDatasetOffset,zorder=2)

pyplot.show()
